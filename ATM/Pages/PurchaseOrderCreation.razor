@page "/PurchaseOrderCreation"

@using ATM.Models;
@using ATM.Data;
@using Microsoft.EntityFrameworkCore;

@inject ATM.Data.ApplicationDbContext _context
@inject PurchaseOrderService purchaseorderservice
@inject MaterialTypeService materialtypeservice
@inject MaterialCategoryService materialcategoryservice
@inject MaterialSubCategoryService materialsubcategoryservice
@inject SupplierService supplierservice
@inject MaterialService materialservice
@inject UnitService unitservice
@inject GRNService grnservice

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300&display=swap" rel="stylesheet">
</head>

<body style="font-family: Montserrat; font-weight:600">

    <div class="col-12" style="background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#51005E">
        <h4 style="padding-left:1%; font-weight:600; padding-right:1%; padding-top:1%; color:white; font-size:17px">Let's create Purchase Order</h4>
    </div><br /><br />

    <div class="row margin" >
        <div class="col-3 margin">
            Purchase Order No:
            <SfTextBox CssClass="e-input-group" ID="po" Value="@po" Readonly=true style="background-color: white"></SfTextBox>
        </div>
        <div class="col-3 margin">
            Select Supplier Name:
            <SfDropDownList ID="suppliername" TValue="int" TItem="Supplier" DataSource="@Suppliers" @bind-Value="SupplierID" >
                <DropDownListFieldSettings Value="SupplierID" Text="SupplierName"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <div class="col-3 margin">
            Date of Purchase Order
            <SfDatePicker TValue="DateTime" Format="dd-MM-yyyy" Value="@DateValue">
                <DatePickerEvents TValue="DateTime" ValueChange="@onChange"></DatePickerEvents>
            </SfDatePicker>
        </div>

    </div>

    <br /><br />
        <div class="col-12" style="background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#51005E">
        <h4 style="padding-left:1%; padding-right:1%; padding-top:1%; font-weight:600; color:white; font-size:17px">Item Summary</h4>
    </div><br />

    <div style="margin-left:auto; margin-right:auto; align-content:center">
        <SfGrid DataSource="@TemperoryPurchaseOrders" ID="TempGrid"  Width="auto">
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true">
            </GridEditSettings>
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridEvents OnActionBegin="ActionBeginHandler" TValue="TemperoryPurchaseOrder"></GridEvents>
            <GridColumns>

                <GridColumn Field="@nameof(TemperoryPurchaseOrder.MaterialName)" Width="180" HeaderText="Material Name" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.BaseAmount)" Width="180" HeaderText="Base Amount" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.Quantity)" Width="180" HeaderText="Quantity" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.Amount)" Width="180" AllowEditing=false HeaderText="Amount" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.DiscountPercent)" Width="180" HeaderText="Discount Percent" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.IGSTPercent)" Width="180" AllowEditing=false HeaderText="GST Percent" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.IGSTAmount)" Width="180" AllowEditing=false HeaderText="GST Amount" AllowFiltering="true"></GridColumn>
                <GridColumn Field="@nameof(TemperoryPurchaseOrder.SubTotal)" Width="180" AllowEditing=false HeaderText="Subtotal" AllowFiltering="true"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>


    <br /><br />
    <div class="col-12" style="background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#51005E">
        <h4 style="padding-left:1%; padding-right:1%; padding-top:1%; font-weight:600; color:white; font-size:17px">Add Item</h4>
    </div><br /><br />

    <EditForm Model="@temppo" OnValidSubmit="@AddItem">


            <div class="row">

                <div class="col-3 margin">
                    Material Type
                    <SfDropDownList ID="materialtype_name" TValue="string" TItem="MaterialType" @bind-Value="materialtypeid"
                                     DataSource="@MaterialTypes">
                        <DropDownListFieldSettings Value="MaterialTypeID" Text="MaterialTypeName"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="MaterialType" ValueChange="TypeIDChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>

                <div class="col-3 margin">
                    Material Name
                    <SfDropDownList ID="material_name" TValue="string" TItem="Material"
                                     DataSource="@MaterialCustom">
                        <DropDownListFieldSettings Value="MaterialID" Text="MaterialName"></DropDownListFieldSettings>
                        <DropDownListEvents TItem="Material" TValue="string" ValueChange="GetMaterialsByID"></DropDownListEvents>
                    </SfDropDownList>
                </div>

                <div class="col-3 margin">
                    Material Description
                    <SfTextBox Readonly=true @bind-Value="@desc"></SfTextBox>
                </div>

            </div>

            <br />


            <div class="row">

                <div class="col-3 margin">
                     Quantity
                    <SfNumericTextBox ShowSpinButton="false" @bind-Value="@temppo.Quantity" OnChange="CalculateAmount"></SfNumericTextBox>
                </div>

                <div class="col-3 margin">
                     Base Amount
                    <SfNumericTextBox ShowSpinButton=false @bind-Value="@temppo.BaseAmount" OnChange="CalculateAmount"></SfNumericTextBox>
                </div>

                <div class="col-3 margin">
                     Discount
                    <SfNumericTextBox ShowSpinButton=false @bind-Value="@temppo.DiscountPercent" Max="100" Min="0"
                                      OnChange="CalculateAmount"></SfNumericTextBox>
                </div>

            </div>

            <br />

            <div class="row">

                <div class="col-3 margin">
                    HSN Code
                    <SfTextBox Readonly=true @bind-Value="@HSNCode" style="background-color: white"></SfTextBox>
                </div>

                <div class="col-3 margin">
                    GST Percent
                    <SfNumericTextBox ShowSpinButton=false Readonly=true @bind-Value="@GSTPercent" style="background-color: white"></SfNumericTextBox>
                </div>
                <div class="col-3 margin">
                    GST Amount
                    <SfNumericTextBox ShowSpinButton=false Readonly=true @bind-Value="@GSTAmount" style="background-color: white"></SfNumericTextBox>
                </div>
            </div>

            <br />

            <div class="row">

                <div class="col-3 margin">
                     Subtotal
                    <SfNumericTextBox ShowSpinButton=false Readonly=true @bind-Value="@SubTotal"></SfNumericTextBox>
                </div>

                <div class="col-3 margin">

                </div>
                <div class="col-3 margin">

                </div>

            </div>

            <br />

            <div class="row">
                <div class="col-12" style="text-align:center">


                <button  class="btn btn-primary e-btn:hover e-success"  style="background-color:blueviolet; font-weight:600; color:aliceblue; margin-bottom:40px; border-radius:10px;" type="submit">
                 Add Item</button>
                </div>
            </div>

    </EditForm>


    <div class="col-12" style="background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#51005E">
        <h4 style="padding-left:1%; padding-right:1%; padding-top:1%; font-weight:600; color:white; font-size:17px">Add Miscelleneous Info</h4>
    </div><br /><br />


        <div class="row">

            <div class="col-3 margin">
                Kind Attention
                <SfTextBox ID="kindattn"  @bind-Value="@KindAttn"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Delivery
                <SfTextBox ID="delivery"  @bind-Value="@Delivery"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Payment
                <SfTextBox ID="payment"  @bind-Value="@Payment"></SfTextBox>
            </div>

        </div>
        <br />
        <div class="row">

            <div class="col-3 margin">
                P & F
                <SfTextBox ID="PandF"  @bind-Value="@PandF"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Transportation Amount
                <SfTextBox ID="transport-amt"  @bind-Value="@TransportationAmt"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Insurance
                <SfTextBox ID="insurance"  @bind-Value="Insurance"></SfTextBox>
            </div>

        </div>
        <br />
        <div class="row">

            <div class="col-3 margin">
                Dispatched Through
                <SfTextBox ID="dispatch"  @bind-Value="@DispatchedThrough"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Quotation No
                <SfTextBox ID="quotationno"  @bind-Value="@QuotationNo"></SfTextBox>
            </div>

            <div class="col-3 margin">
                Date of Quotation
                <SfDatePicker TValue="DateTime" Value="@DateofQuotation">
                    <DatePickerEvents TValue="DateTime" ValueChange="@onQuotChange"></DatePickerEvents>
                </SfDatePicker>
            </div>

        </div>
        <br />

    <div class="row">
        <div class="col-12" style="text-align:center">
            <button  class="btn btn-primary e-btn:hover e-success" style="background-color:blueviolet; font-weight:600;  color:aliceblue; margin-bottom:40px; border-radius:10px;" @onclick="SaveItem">
                 Save Purchase Order</button>
        </div>
    </div>

    <div class="bottom" style="align-content:center; padding-left:1%; padding-right:1%; padding-top:1%; color:white; font-size:19px; background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-color:black">
        <div class="row">
            <div class="col-3 margin padding"  >
                <h4>SGST Amount: <br /> @SGST</h4>
            </div>
            <div class="col-3 margin">
                <h4>CGST Amount: <br /> @CGST</h4>
            </div>
            <div class="col-3 margin">
                <h4>IGST Amount: <br /> @GSTAmount</h4>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-3 margin">
                <h4>Base Amount: <br /> @BaseAmount</h4>
            </div>
            <div class="col-3 margin">
                <h4>Total GST Amount: <br /> @purchaseorder.TotalGSTAmount</h4>
            </div>
            <div class="col-3 margin">
                <h4>Total Amount: <br /> @purchaseorder.TotalAmount</h4>
            </div>
        </div>
        <div class="row">
        </div>
    </div>

    <br /><br />

</body>
<style>
    .margin{
        margin-left:auto;
        margin-right:auto;
    }
    .padding{
        padding-top: auto;
        padding-bottom: auto;
        padding-left:auto;
        padding-right:auto;
    }
</style>
<style>
    .e-headercell{
        
       color:indigo;
        font-size: 125px;
    }
</style>
@code {


    public decimal SGST { get; set; }
    public decimal CGST { get; set; }
    public decimal IGST { get; set; }
    public decimal GSTPercent { get; set; }
    public decimal BaseAmount { get; set; }  // Single Item Amount
    public decimal SubTotal { get; set; }    // Amount with Discount and GST
    public decimal Quantity { get; set; }    // Amount with Discount and GST
    public decimal GSTAmount { get; set; }    // GST Amount
    public decimal Amount { get; set; }    // Quantity * BaseAmount
    public decimal AmountAfterDiscount { get; set; }
    public int materialID { get; set; }
    public int UserID { get; set; } = 1;
    public int SupplierID { get; set; }
    public int PONumber { get; set; }
    //public int materialtypeid { get; set; }
    //public int materialid { get; set; }

    public decimal TotalGSTPercent { get; set; }
    public decimal TotalGSTAmount { get; set; }
    public decimal TotalDiscountPercent { get; set; }
    public decimal TotalDiscountAmount { get; set; }
    public decimal TotalAmount { get; set; }

    public string GSTPer { get; set; } = null!;
    public string Fyear { get; set; } = null!;
    public string desc { get; set; } = null!;
    public string materialname { get; set; } = null!;
    string HSNCode { get; set; } = null!;
    public string po = null!;
    public string materialtypeid { get; set; } = null!;
    public string materialtypename { get; set; } = null!;
    public string materialid { get; set; } = null!;
    public string UnitName { get; set; } = null!;
    public string KindAttn { get; set; } = "";
    public string Delivery { get; set; } = "";
    public string Payment { get; set; } = "";
    public string PandF { get; set; } = "";
    public string TransportationAmt { get; set; } = "";
    public string Insurance { get; set; } = "";
    public string DispatchedThrough { get; set; } = "";
    public string QuotationNo { get; set; } = "";

    public List<PurchaseOrder> PurchaseOrders { get; set; } = null!;
    public List<TemperoryPurchaseOrder> TemperoryPurchaseOrders { get; set; } = null!;
    public List<DetailedPurchaseOrder> DetailedPurchaseOrders { get; set; } = null!;
    public List<PurchaseOrder> POCustom { get; set; } = null!;
    public List<MaterialType> MaterialTypes { get; set; } = null!;
    public List<Supplier> Suppliers { get; set; } = null!;
    public List<Material> Materials { get; set; } = null!;
    public List<Material> MaterialCustom { get; set; } = null!;
    public List<Material> MaterialCustomd { get; set; } = null!;
    public List<MaterialCategory> MaterialCategories { get; set; } = null!;
    public List<MaterialSubCategory> MaterialSubCategories { get; set; } = null!;
    public List<Material> MaterialDetails { get; set; } = null!;
    public List<Unit> Units { get; set; } = null!;
    public List<IQueryable> MaterialTypeCustom { get; set; } = null!;

    public DateTime DateValue { get; set; } = DateTime.Now;
    public DateTime DateofQuotation { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        PurchaseOrders = await Task.Run(() => purchaseorderservice.GetPurchaseOrders());
        TemperoryPurchaseOrders = await Task.Run(() => purchaseorderservice.GetTemperoryPO());
        MaterialTypes = await Task.Run(() => materialtypeservice.GetMaterialTypes());
        Suppliers = await Task.Run(() => supplierservice.GetSuppliers());
        Materials = await Task.Run(() => materialservice.GetMaterials());
        Units = await Task.Run(() => unitservice.GetUnits());
        MaterialCategories = await Task.Run(() => materialcategoryservice.GetMaterialCategories());
        MaterialSubCategories = await Task.Run(() => materialsubcategoryservice.GetMaterialSubCategories());
        //MaterialDetails = GetMaterialDetails().ToList();
        //MaterialSubCategories = GetMaterialDetails();
        MaterialDetails = await Task.Run(() => materialservice.GetMaterials());
        //MaterialTypeCustom = await Task.Run(() => materialservice.GetCustomTypeID());
        po = await Task.Run(() => purchaseorderservice.GetPONumber(DateValue));
        Fyear = await Task.Run(() => purchaseorderservice.GetFYear(DateValue));
        //MaterialTypeCustom = Materials.DistinctBy(type => type.MaterialTypeID).ToList();
    }


    protected async void onChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime> args)
    {
        DateValue = args.Value;
        po = purchaseorderservice.GetPONumber(DateValue).Result;
        Fyear = await Task.Run(() => purchaseorderservice.GetFYear(DateValue));
        StateHasChanged();
    }

    protected void onQuotChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime> args)
    {
        DateofQuotation = args.Value;
        StateHasChanged();
    }

    public void CalculateAmount()
    {
        Amount = temppo.BaseAmount * temppo.Quantity;
        AmountAfterDiscount = Amount - Amount * temppo.DiscountPercent / 100;
        GSTAmount = AmountAfterDiscount * GSTPercent / 100;
        SubTotal = AmountAfterDiscount + GSTAmount;
    }

    PurchaseOrder purchaseorder = new PurchaseOrder();
    TemperoryPurchaseOrder temppo = new TemperoryPurchaseOrder();
    DetailedPurchaseOrder detailedpurchaseorder = new DetailedPurchaseOrder();
    Material material = new Material();

    public async Task TypeIDChange()
    {

        //var result = _context.Tbl_Material.Join(_context.Tbl_MaterialType, material => material.MaterialTypeID,
        //                                                      type => type.MaterialTypeID,
        //                                                      (material, type) => new
        //                                                      {
        //                                                          MaterialTypeID = type.MaterialTypeID,
        //                                                          MaterialTypeName = type.MaterialTypeName
        //                                                      }).ToListAsync();

        //Material mat = new Material();

        //MaterialTypeCustom = result;

        MaterialCustom = await Task.Run(() => materialservice.GetMaterialByTypeID(materialtypeid));
    }

    public void GetMaterialsByID(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Material> args)
    {
        materialid = args.Value;
        var id = Convert.ToInt32(materialid);
        Material mat = _context.Tbl_Material.Find(id);

        desc = mat.MaterialDescription;
        HSNCode = mat.MaterialHSNCode;
        GSTPercent = mat.MaterialGSTPercent;
        UnitName = mat.UnitName;
        materialname = mat.MaterialName;
    }



    public async void AddItem()
    {
        temppo.Description = desc;
        temppo.HSNCode = HSNCode;
        temppo.IGSTPercent = GSTPercent;
        temppo.IGSTAmount = GSTAmount;
        temppo.SubTotal = SubTotal;
        temppo.Amount = Amount;
        temppo.Fyear = Fyear;
        temppo.MaterialID = Convert.ToInt32(materialid);
        temppo.MaterialName = materialname;
        temppo.UnitName = UnitName;
        temppo.UserId = UserID;
        temppo.MaterialTypeID = Convert.ToInt32(materialtypeid);
        temppo.CreatedBy = "Tanaya";
        temppo.ModificationTime = DateTime.Now;
        temppo.ModifiedBy = " ";


        try
        {

            await purchaseorderservice.AddTemperoryPO(temppo);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }

        temppo = new TemperoryPurchaseOrder();
        TemperoryPurchaseOrders = await Task.Run(() => purchaseorderservice.GetTemperoryPO());
        base.StateHasChanged();

    }

    public async void SaveItem()
    {

        ////// Calculate Total Amount

        foreach (var material in TemperoryPurchaseOrders)
        {
            TotalGSTPercent = TotalGSTPercent + material.IGSTPercent;
            TotalGSTAmount = TotalGSTAmount + material.IGSTAmount;
            TotalDiscountPercent = TotalDiscountPercent + material.DiscountPercent;
            TotalAmount = TotalAmount + material.Amount;
        }

        //////

        TotalDiscountAmount = TotalAmount - TotalAmount * TotalDiscountPercent / 100;

        purchaseorder.DateOfQuotation = DateofQuotation;
        purchaseorder.SupplierID = SupplierID;

        purchaseorder.Fyear = Fyear;
        purchaseorder.DateOfPO = DateValue;
        purchaseorder.TotalGSTAmount = TotalGSTAmount;
        purchaseorder.TotalDiscountAmount = TotalDiscountAmount;
        purchaseorder.TotalAmount = TotalAmount;
        purchaseorder.UserId = UserID;
        purchaseorder.KindAttention = KindAttn;
        purchaseorder.Delivery = Delivery;
        purchaseorder.Payment = Payment;
        purchaseorder.PandF = PandF;
        purchaseorder.TransportationAmount = TransportationAmt;
        purchaseorder.Insurance = Insurance;
        purchaseorder.DispatchedThrough = DispatchedThrough;
        purchaseorder.QuotationNo = QuotationNo;
        purchaseorder.CreatedBy = "1";
        purchaseorder.CreationTime = DateTime.Now;
        purchaseorder.ModifiedBy = "1";
        purchaseorder.ModificationTime = DateTime.Now;


        try
        {
            await purchaseorderservice.AddPurchaseOrder(purchaseorder);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }


        foreach (var item in TemperoryPurchaseOrders)
        {

            detailedpurchaseorder.PONumber = purchaseorder.PONumber;
            detailedpurchaseorder.SrNo = item.SrNo;
            detailedpurchaseorder.MaterialID = item.MaterialID;
            detailedpurchaseorder.MaterialTypeID = item.MaterialTypeID;
            detailedpurchaseorder.MaterialName = item.MaterialName;
            detailedpurchaseorder.Fyear = item.Fyear;
            detailedpurchaseorder.Description = item.Description;
            detailedpurchaseorder.HSNCode = item.HSNCode;
            detailedpurchaseorder.BaseAmount = item.BaseAmount;
            detailedpurchaseorder.Quantity = item.Quantity;
            detailedpurchaseorder.Amount = item.Amount;
            detailedpurchaseorder.UnitName = item.UnitName;
            detailedpurchaseorder.DiscountPercent = item.DiscountPercent;
            detailedpurchaseorder.SGSTPercent = item.SGSTPercent;
            detailedpurchaseorder.SGSTAmount = item.SGSTAmount;
            detailedpurchaseorder.CGSTPercent = item.CGSTPercent;
            detailedpurchaseorder.CGSTAmount = item.CGSTAmount;
            detailedpurchaseorder.IGSTPercent = item.IGSTPercent;
            detailedpurchaseorder.IGSTAmount = item.IGSTAmount;
            detailedpurchaseorder.SubTotal = item.SubTotal;
            detailedpurchaseorder.UserId = item.UserId;
            detailedpurchaseorder.CreatedBy = "1";
            detailedpurchaseorder.ModifiedBy = "1";
            detailedpurchaseorder.CreationTime = DateTime.Now;
            detailedpurchaseorder.ModificationTime = DateTime.Now;


            try
            {
                await purchaseorderservice.AddDetailedPO(detailedpurchaseorder);

            }
            catch
            {
                base.StateHasChanged();
            }


            detailedpurchaseorder = new DetailedPurchaseOrder();

        }

        purchaseorder = new PurchaseOrder();
        base.StateHasChanged();

        detailedpurchaseorder = new DetailedPurchaseOrder();
        base.StateHasChanged();


        _context.Database.ExecuteSqlRaw("Truncate table Tbl_TemperoryPurchaseOrder");
        //_context.Database. ("Truncate table Tbl_TemperoryPurchaseOrder");
        await _context.SaveChangesAsync();
        base.StateHasChanged();
        TemperoryPurchaseOrders = await Task.Run(() => purchaseorderservice.GetTemperoryPO());

    }

    /////////////////////
    //                 //
    // defined classes //
    //                 //
    /////////////////////

    public class GST
    {
        public int ID { get; set; }
        public string GSTPercent { get; set; } = null!;
    }
    GST gstobj = new GST();

    private List<GST> gst = new List<GST>() {
        new GST(){ ID= 1, GSTPercent= "0" },
        new GST(){ ID= 2, GSTPercent= "5" },
        new GST(){ ID= 3, GSTPercent= "12" },
        new GST(){ ID= 4, GSTPercent= "18" },
        new GST(){ ID= 5, GSTPercent= "28" },
     };


    public async void ActionBeginHandler(ActionEventArgs<TemperoryPurchaseOrder> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                await purchaseorderservice.AddTemperoryPO(Args.Data);
                TemperoryPurchaseOrders = (await purchaseorderservice.GetTemperoryPO()).ToList();
                base.StateHasChanged();
            }
            else
            {
                await purchaseorderservice.UpdateTemperoryPO(Args.Data);
                TemperoryPurchaseOrders = (await purchaseorderservice.GetTemperoryPO()).ToList();
                base.StateHasChanged();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await purchaseorderservice.DeleteTemperoryPO(Args.Data.SrNo);
            base.StateHasChanged();
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    //public IEnumerable<Material> MaterialEnum()
    //{

    //}


    //public class MaterialDetails
    //{
    //    public string MaterialName { get; set; }
    //    public string MaterialTypeName { get; set; }
    //    //public int MaterialID { get; set; }
    //    //public int MaterialTypeID { get; set; }
    //    //public int MaterialCategoryID { get; set; }
    //    //public string MaterialCategoryName { get; set; }
    //}

    //public List newList = new List<(string materialname, string materialtypename)>

    ///////



    //public async Task GetMaterialsByID(ChangedEventArgs e)
    //{

    //    //var id = Convert.ToInt32(materialid);
    //    var id = Convert.ToInt32(e.Value);
    //    var id1 = materialid;
    //    //var id = 2;

    //    Material mat = _context.Tbl_Material.Find(id);
    //    HSNCode = mat.MaterialHSNCode;
    //    desc = mat.MaterialDescription;
    //    GSTPercent = mat.MaterialGSTPercent;
    //    UnitName = mat.UnitName;
    //    materialname = mat.MaterialName;
    //    materialtypename = mat.MaterialType.ToString();
    //}



    //public void CalculateGST(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    //{
    //    if (args.Element.ID == "materialname")
    //    {
    //        GSTPer = args.Value;
    //    }
    //}


    //public void TypeIDChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, MaterialType> args)
    //{
    //    materialtypeid = args.Value;
    //    var id = Convert.ToInt32(materialtypeid);

    //}


    //public async Task GetMaterialsByID()
    //{

    //    var id = Convert.ToInt32(materialid);
    //    var id1 = materialid;
    //    //var id = 2;

    //    Material mat = _context.Tbl_Material.Find(2);
    //    HSNCode = mat.MaterialHSNCode;
    //    desc = mat.MaterialDescription;
    //    GSTPercent = mat.MaterialGSTPercent;
    //    UnitName = mat.UnitName;
    //    materialname = mat.MaterialName;
    //    materialtypename = mat.MaterialType.ToString();
    //    //mat = await _context.Tbl_Material
    //    //        .ToListAsync();

    //    //MaterialType type = _context.Tbl_MaterialType.Find(materialtypeid);
    //    //materialname = type.MaterialTypeName;
    //}


}

<style>


    .e-ddl.e-input-group.e-control-wrapper.e-input-focus::before, .e-ddl.e-input-group.e-control-wrapper.e-input-focus::after {
        background: #CBC3E3;
    }

    .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::before, .e-float-input.e-input-group:not(.e-float-icon-left) .e-float-line::after, .e-float-input.e-control-wrapper.e-input-group:not(.e-float-icon-left) .e-float-line::after {
        background-color: #E6E6FA;
    }

    .e-ddl.e-lib.e-input-group.e-control-wrapper.e-control-container.e-float-input.e-input-focus .e-float-text.e-label-top {
        color: #CBC3E3;
    }

    .e-dropdownbase .e-list-item, .e-dropdownbase .e-list-item.e-item-focus {
        background-color: #E6E6FA;
        color: black;
        min-height: 29px;
    }


    .e-input-group-icon:before {
        font-family: e-icons;
    }

    .e-input-group .e-input-group-icon.e-input-calendar {
        font-size: 16px;
    }

    .e-input-group-icon.e-input-calendar:before {
        content: "";
    }

</style>